#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Fri Mar  6 12:09:54 2020

@author: sawan
"""

#%% MODULE IMPORT
import os
from glob import glob
from pandas import read_csv
import numpy as np
from scipy.stats import multivariate_normal

class GMM(object):
    def __init__(self,K,mu,cov,prop):
        self.K=K
        self.mu=mu
        self.cov=cov
        self.prop=prop
        
    @property
    def theta(self):
        return [self.mu, self. cov, self.prop]
#%% OLD FAITHFUL DATASET
def Get_Old_Faithful():
    path_to_data=os.path.abspath(os.path.join(os.path.dirname( __file__ ), '..', 'Data'))
    csv_data=glob(os.path.join(path_to_data, "*.csv"))
    iter=0
    data=[]
    for files in csv_data:
        temp = read_csv(csv_data[iter])
        temp=temp.values
        data.append(temp)
        iter=iter+10
    # converting it into a float array
    data=np.squeeze(np.asarray(data))
 
    #%% Normalizing
    data_mean=np.mean(data,axis=0)
    data_std=np.std(data,axis=0)
    data=data-data_mean
    data=data/data_std
    #Creating a data label column to say which cluster a point lies in
    data[:,0]=0  
    return data      
#%% Running the E-Step
def E_Step(data,K,theta):
    means=theta[0]
    Covariance=theta[1]
    proportions=theta[2]
    #Computing responsibility coefficients of each point for each cluster.
    responsibility=np.zeros((len(data),K))
    for i in range(K):
        itr=0    
        for x in data[:,1:]:
            normalising=0
            N_xn=multivariate_normal.pdf(x,mean=means[:,i], cov=Covariance[:,:,i])
            responsibility[itr][i]=proportions[i]*N_xn
            for j in range(K):
                normalising+=proportions[j]*multivariate_normal.pdf(x,mean=means[:,j], cov=Covariance[:,:,j])
            responsibility[itr][i]=responsibility[itr][i]/normalising
            itr+=1
    return responsibility

def M_Step(data,responsibility):
    [N,K]=np.shape(responsibility) #N is number of data points
    [_,d]=np.shape(data[:,1:]) #Data dimension
    
    #Compute Proportions
    Nk=np.sum(responsibility,axis=0)
    proportions=Nk/N
        
    #Compute Means
    means=np.zeros((K,d))        
    for k in range(K):
        temp1=data[:,1:]
        temp2=responsibility[:,k]
        temp=temp1*temp2[:,None] #multiplying a vector with multiple columns
        means[k]=(1/Nk[k])*np.sum(temp,axis=0)  
    means=np.transpose(means)
        
    #Compute Covariance
    Covariance=np.zeros((d,d,K))        
    for k in range(K):
        for n in range(N):
            temp1=data[n,1:]-means[:,k]
            temp2=np.outer(temp1,np.transpose(temp1))
            temp=responsibility[n,k]*temp2
            Covariance[:,:,k]+=temp
        Covariance[:,:,k]=(1/Nk[k])*Covariance[:,:,k]
    
    theta=[means,Covariance,proportions]
    Likelihood=0
    log_likelihood=0
    for n in range(N):
        for k in range(K):
            Likelihood+=proportions[k]*multivariate_normal.pdf(data[n,1:],mean=means[:,k], cov=Covariance[:,:,k])
        log_likelihood+=np.log(Likelihood)
            
    return theta, log_likelihood

#%% PLOTS


import matplotlib.pyplot as plt
from matplotlib.patches import Ellipse
def draw_ellipse(position, covariance, ax=None, **kwargs):
# taken from
# https://github.com/DFoly/Gaussian-Mixture-Modelling/blob/master/gaussian-mixture-model.ipynb
    """Draw an ellipse with a given position and covariance"""
    ax = ax or plt.gca()
    
    # Convert covariance to principal axes
    if covariance.shape == (2, 2):
        U, s, Vt = np.linalg.svd(covariance)
        angle = np.degrees(np.arctan2(U[1, 0], U[0, 0]))
        width, height = 2 * np.sqrt(s)
    else:
        angle = 0
        width, height = 2 * np.sqrt(covariance)
    
    # Draw the Ellipse
    for nsig in range(1, 4):
        ax.add_patch(Ellipse(position, nsig * width, nsig * height,
                             angle, **kwargs))
        